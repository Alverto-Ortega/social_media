import User from '../models/user.model';
import jwt from 'jsonwebtoken';
import expressJwt from 'express-jwt';
import config from './../../config/config';
//handles requests to signin and signout routes and 
//also provides JWT and express-jwt functionality to enable authentication and authorization for protected user API endpoints


//controller functions
const signin = async (req, res) => {
    try{
        let user = await User.findOne({"email": req.body.email});
        if (!user){
            return res.status('401').json({error: "User not found"});
        }
        if(!user.authenticate(req.body.password)){
            return res.status('401').send({error: "Email and password don't match."});
        }

        const token = jwt.sign({_id: user._id}, config.jwtSecret);
        
        res.cookie('t', token, {expire: new Date() + 9999});

        return res.json({
            token,
            user: {
                _id: user._id,
                name: user.name, 
                email: user.email
            }
        });
    } catch (err){
        return res.status('401').json({error: "Could not Sign in."});
    }

};
const signout = (req, res) => {
    res.clearCookie("t");
    return res.status("200").json({
        message: "signed out"
    });

};
// add this to any route that should be protected against unauthenticated access
const requireSignin = expressJwt({
    secret: config.jwtSecret,
    userProperty: 'auth',
    algorithms: ['HS256']
});
//add this function to routes that require both authentication and authorization
//req.auth is generated from requireSignin by express-jwt , and the req.profile is generated by userID function in user.controller.js after authentication verification.
const hasAuthorization = (req, res, next) => {
    const authorized = req.profile && req.auth && 
                        req.profile._id == req.auth._id;
    if (!(authorized)){
        return res.status('403').json({
            error: "User is not authorized"
        });
    }
    next();

};

export default {signin, signout, requireSignin, hasAuthorization};